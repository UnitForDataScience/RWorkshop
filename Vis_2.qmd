---
title: "Untitled"
format: pdf
editor: visual
---
## 4. Leaflets

Leaflet stands out as a highly regarded open-source JavaScript library renowned for its interactive mapping capabilities. With a wide-reaching presence, it's used by various websites, including The New York Times, The Washington Post, GitHub, and Flickr. It's also a preferred choice for GIS experts and platforms such as OpenStreetMap, Mapbox, and CartoDB. For more info, please, check [**Leaflet for R webpage**](http://rstudio.github.io/leaflet/)**.**

### *Basic Leaflets*

```{r}
library(leaflet)
library(rnaturalearth)
library(leaflet)
library(sf)
library(maps)
library(leaflet)
library(leaflegend)
library(sf)
library(osmdata)
library(fontawesome)


#Let's get United States map
library(maps)
mapStates=map("state", fill = TRUE, plot = FALSE) #used to retrieve state boundary data using the maps package in R. This code should work correctly if the maps package is installed and loaded.
leaflet(data = mapStates) |> 
  addTiles() |> 
  addPolygons(fillColor = topo.colors(15, alpha = NULL), stroke = FALSE)




# Load world map data and filter for US states
world <- ne_countries(scale = "medium", returnclass = "sf")
us_states <- world[world$iso_a2 == "US", ]
leaflet(data = us_states) |>
  addTiles() |>
  addPolygons(fillColor = topo.colors(15, alpha = NULL), stroke = FALSE)



#let's look at the location of Data Science and Analytics 
DSA<- leaflet() |>
  addTiles() |>  
  addMarkers(lng=-111.9347506, lat=33.4193154, popup="Data Science and Analytics")
print(DSA)  # Print the map


#My hometown 
my_hometown<- leaflet() |>
  addTiles() |>  
  addMarkers(lng=48.9719, lat=39.5779, popup="My Hometown")
print(my_hometown)  # Print the map




#get two locations within a rectangle
two_locations<- leaflet() |>  # Create a Leaflet map
  addTiles() |>    # adds a base map layer using OpenStreetMap tiles. Info about OpenStreetMap: https://en.wikipedia.org/wiki/OpenStreetMap
  addMarkers(lng = c(-74.006, -77.0369), lat = c(40.7128, 38.9072),
             popup = c("New York City", "Washington, D.C.")) |>    # Add markers with popups
  addRectangles(
    lng1 = -80, lat1 = 35, lng2 = -70, lat2 = 45,
    fillColor = "blue", fillOpacity = 0.2,
    popup = "Rectangle Area") |>   # Add a polygon layer (rectangle)       
  setView(lng = -75, lat = 40, zoom = 5)   # Customize the map view
print(two_locations)          # print the map





# Create custom icons for markers in Leaflet. You can use several functions. icons(), addMarkers(), or addAwesomeMarkers()
custom_icons <- icons(
  iconUrl = c("https://leafletjs.com/examples/custom-icons/leaf-red.png",
              "https://leafletjs.com/examples/custom-icons/leaf-green.png"),
  iconWidth = 38, iconHeight = 95, iconAnchorX = 22, iconAnchorY = 94
)

# Create a Leaflet map with layers control
leaflet() |>
  # Add a tile layer (Stamen Toner Lite)
  addTiles(group = "Base Map") |>
  # Add markers with custom icons and clustering
  addMarkers(lng = c(-74.006, -77.0369, -75.1652, -73.9352),
             lat = c(40.7128, 38.9072, 39.9526, 40.7309),
             icon = custom_icons,
             clusterOptions = markerClusterOptions(),
             group = "Markers") |>
  # Add a legend
  addLegend("bottomright", title = "Custom Icons",
            labels = c("Red Icon", "Green Icon"),
            colors = c("red", "green"),
            opacity = 1,
            group = "Legend") |>
  # Add layers control
  addLayersControl(
    baseGroups = c("Base Map"),
    overlayGroups = c("Markers", "Legend"),
    options = layersControlOptions(collapsed = FALSE)
  )
```

### *Advanced Leaflets*

```{r}
library(leaflet)
library(osmdata)

#Let's get the pubs, restaurants, and coffee shops on the map in Tempe 


# Define bounding box coordinates for Tempe, AZ
bbox <- c(
  left = -111.9429779555835,
  bottom = 33.420643504864074,
  right = -111.9069399830536,
  top = 33.442418916376705
)


# Query OpenStreetMap data for amenities within the bounding box
osm_query <- opq(bbox) |>
  add_osm_feature(key = 'amenity', value = c('restaurant', 'pub', 'cafe', 'bar'))

osm_data <- osmdata_sf(osm_query)
foodDrink <- osm_data$osm_points

# Filter out NA values in the amenity column
foodDrink <- foodDrink[!is.na(foodDrink$amenity), ]

# Define icons for different amenities
iconSet <- awesomeIconList(
  pub = makeAwesomeIcon(icon = 'beer', library = 'fa', iconColor = 'gold'),
  cafe = makeAwesomeIcon(icon = 'coffee', library = 'ion', iconColor = '#000000'),
  restaurant = makeAwesomeIcon(icon = 'cutlery', library = 'glyphicon', iconColor = 'rgb(192, 255, 0)', spin = TRUE),
  bar = makeAwesomeIcon(icon = 'home', library = 'glyphicon', iconColor = 'rgb(192, 255, 0)', spin = F)
)

# Create an interactive Leaflet map
leaflet(data = foodDrink) %>%
  addTiles() %>%
  addAwesomeMarkers(icon = ~iconSet[amenity], group = ~amenity) |>
  addLegendAwesomeIcon(iconSet = iconSet,
                       orientation = 'horizontal',
                       title = htmltools::tags$div(
                         style = 'font-size: 20px;',
                         'Horizontal Legend'),
                       labelStyle = 'font-size: 16px;',
                       position = 'bottomright',
                       group = 'Horizontal Legend') |>
  addLegendAwesomeIcon(iconSet = iconSet,
                       orientation = 'vertical',
                       marker = FALSE,
                       title = htmltools::tags$div(
                         style = 'font-size: 20px;',
                         'Vertical Legend'),
                       labelStyle = 'font-size: 16px;',
                       position = 'bottomright',
                       group = 'Vertical Legend') |>
  addLayersControl(baseGroups = sprintf('%s Legend', 
                                        c('Horizontal', 'Vertical')),
                   overlayGroups = c('pub', 'cafe', 'restaurant', 'bar'),
                   options = layersControlOptions(collapsed = FALSE))
```

## 5. Animations

Animations with ggplot2 in R allow you to create dynamic visualizations that change over time, by using the gganimate package. This package extends the capabilities of ggplot2 to add a time dimension to your plots and create animations that illustrate changes in your data.

```{r}
library(WDI)
install.packages("animation")
library(timetk)
library(dplyr)
library(zoo)
library(datasets)
library(gganimate)
library(animation)
install.packages("gifski")
library(gifski)


ggplot(gapminder, aes(x=gdpPercap, y=lifeExp, size = pop, color=country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = gapminder$country) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  facet_wrap(~continent) +
  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  ease_aes('linear')


#Here is an example from R for Political Science: https://rforpoliticalscience.com/
oil_data = WDI(indicator='NY.GDP.PETR.RT.ZS', country=c('IR', 'SA'), start=1970, end=2022)
my_palette = c("#DA0000", "#239f40")
 #both the hex colors are from the maps of the countries

oil_graph <- ggplot(oil_data, aes(year, NY.GDP.PETR.RT.ZS, color =  country)) + 
  geom_line(size = 1.4) +
  labs(title = "Oil rents as a percentage of GDP",
       subtitle = "In Iran and Saudi Arabia from 1970 to 2019",
       x = "Year",
       y = "Average oil rent as percentage of GDP",
       color = " ") +
  scale_color_manual(values = my_palette)
oil_graph + 
ggthemes::theme_fivethirtyeight() + 
theme(
plot.title = element_text(size = 30), 
      axis.title.y = element_text(size = 20),
      axis.title.x = element_text(size = 20))+
 transition_reveal(year)




newdata<-filter(total, country=='Kuwait'|country=='Saudi Arabia'|country=='United States',year>1990)|>
  select("country", "polity", "year", "bicc_milexp")
my_palette = c("#DA0000", "#304c00","#0872b9" )
ggplot(newdata, aes(year, bicc_milexp, color =  country)) + 
  geom_line(size =1.5) +
  labs(title = "",
       subtitle = "",
       x = "Year",
       y = "",
       color = " ") +
  scale_color_manual(values = my_palette)+
  ggthemes::theme_fivethirtyeight() + 
theme(
plot.title = element_text(size = 30), 
      axis.title.y = element_text(size = 20),
      axis.title.x = element_text(size = 20))+
 transition_reveal(year)


# Load AirPassengers data and transform it
df <- AirPassengers %>%
  tk_tbl() %>%
  transform(date = zoo::as.Date(index, frac = 0)) %>%
  as_tibble()

# Create the animated plot
ggplot(data = df, aes(x = date, y = value)) +
  geom_line(aes(group = 1)) +  # Add group aesthetic to geom_line()
  labs(x = "Time", y = "Number of Air Passengers", title = "Air Passengers") +
  transition_reveal(date)
```